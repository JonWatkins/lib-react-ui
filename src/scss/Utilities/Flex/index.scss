$flex-display: (
    "f": flex,
    "inline-f": inline-flex
);

@each $type, $value in $flex-display {
    .#{$type} {
        display: $value;
    }
}

$flex-direction: (
    "row": row,
    "row-rev": row-reverse,
    "col": column,
    "col-rev": column-reverse,
);

@each $type, $value in $flex-direction {
    .f-#{$type} {
        flex-direction: $value;
    }
}

$flex-wrap: (
    "nowrap": nowrap,
    "wrap": wrap,
    "wrap-rev": wrap-reverse,
);

@each $type, $value in $flex-wrap {
    .f-#{$type} {
        flex-wrap: $value;
    }
}

$flex-justify-content: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "between": space-between,
    "around": space-around,
    "evenly": space-evenly,
    "stretch": stretch,
);

$safe-unsafe: (
    "safe": safe,
    "unsafe": unsafe
);

@each $type, $value in $flex-justify-content {
    .justify-#{$type} {
        justify-content: $value;
    }
    @each $overflow, $use in $safe-unsafe {
        .#{$overflow}-justify-#{$type} {
            justify-content: $use $value
        }
    }
}

$flex-align-items: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "stretch": stretch,
    "baseline": baseline,
    "self-start": self-start,
    "self-end": self-end,
);

$first-last: (
    "first": first,
    "last": last,
);

@each $type, $value in $flex-align-items {
    .align-#{$type} {
        align-items: $value
    }
    @each $overflow, $use in $safe-unsafe {
        .#{$overflow}-align-#{$type} {
            align-items: $use $value
        }
    }
    @each $place, $position in $first-last {
        @if ($type == 'baseline') {
            .align-#{$place}-#{$type} {
                align-items: $position $value;
            }
        }
    }
}

$flex-align-content: (
    "start": flex-start,
    "end": flex-end,
    "center": stretch,
    "between": space-between,
    "around": space-around,
    "stretch": stretch,
    "baseline": baseline
);

@each $type, $value in $flex-align-content {
    .align-content-#{$type} {
        align-content: $value
    }
    @each $overflow, $use in $safe-unsafe {
        .#{$overflow}-align-content-#{$type} {
            align-content: $use $value
        }
    }
    @each $place, $position in $first-last {
        @if ($type == 'baseline') {
            .align-content-#{$place}-#{$type} {
                align-content: $position $value
            }
        }
    }
}

$flex-gap: (
    "125": 0.125rem,
    "25": 0.25rem,
    "375": 0.375rem,
    "50": 0.5rem,
    "625": 0.625rem,
    "750": 0.75rem,
    "875": 0.875rem,
    1: 1rem,
    2: 2rem,
    3: 3rem,
    4: 4rem,
    5: 5rem,
    6: 6rem,
    7: 7rem,
    8: 8rem,
    9: 9rem,
    10: 10rem,
);

@mixin gap($value) {
    @include rfs($value, row-gap);
}

@mixin rowGap($value) {
    @include rfs($value, row-gap);
}

@mixin colGap($value) {
    @include rfs($value, column-gap);
}

@each $type,
$value in $flex-gap {
    @if ($type =='125') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='25') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='375') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='50') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='625') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='750') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @if ($type =='875') {
        .gap-0\.#{$type} {
            @include gap($value)
        }
    }

    @else {
        .gap-#{$type} {
            @include gap($value)
        }
    }
}

@each $type, $value in $flex-gap {
    @if ($type == '125') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '25') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '375') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '50') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '625') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '750') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @if ($type == '875') {
        .row-gap-0\.#{$type} {
            @include rowGap($value)
        }
    }
    @else {
        .row-gap-#{$type} {
            @include rowGap($value)
        }
    }
}

@each $type,
$value in $flex-gap {
    @if ($type =='125') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='25') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='375') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='50') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='625') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='750') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @if ($type =='875') {
        .col-gap-0\.#{$type} {
            @include colGap($value)
        }
    }

    @else {
        .col-gap-#{$type} {
            @include colGap($value)
        }
    }
}

$flex-align-self: (
    "auto": auto,
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "baseline": baseline,
    "stretch": stretch,
);

@each $type,
$value in $flex-align-self {
    .align-self-#{$type} {
        align-self: $value
    }

    @each $overflow,
    $use in $safe-unsafe {
        .#{$overflow}-align-self-#{$type} {
            align-self: $use $value
        }
    }

    @each $place,
    $position in $first-last {
        @if ($type =='baseline') {
            .align-self-#{$place}-#{$type} {
                align-self: $position $value
            }
        }
    }
}

$grow-shrink-order: (
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20
);

@each $type in $grow-shrink-order {
    .grow-#{$type} {
        flex-grow: $type;
    }
}

@each $type in $grow-shrink-order {
    .shrink-#{$type} {
        flex-shrink: $type;
    }
}

@each $type in $grow-shrink-order {
    .order-#{$type} {
        order: $type;
    }
}