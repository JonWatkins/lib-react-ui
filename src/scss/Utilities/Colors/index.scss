@use "sass:color";

$primary: #626ED4;
$secondary: #343549;
$success: #2AA39A;
$danger: #EC4561;
$warning: #F8B425;
$info: #38A5F8;
$lightest: #F8F8FA;
$light: lighten(#575C62, 50%);
$lightDark: lighten(#575C62, 35%);
$dark: #575C62;
$muted: #EDECF1;
$white: white;

$theme-colors: (
  "primary": $primary,
  "secondary": $secondary,
  "success": $success,
  "danger": $danger,
  "warning": $warning,
  "info": $info,
  "lightest": $lightest,
  "light": $light,
  "dark": $dark,
  "muted": $muted,
  "white": $white,
);

$light-colors: (
  "primary",
  "secondary",
  "success",
  "danger",
  "warning",
  "info",
);

$opacities: (
  100: 1,
  75: 0.75,
  50: 0.5,
  25: 0.25,
);

$weights: (
  100: 40%,
  200: 30%,
  300: 20%,
  400: 10%,
  500: 0%,
  600: 10%,
  700: 20%,
  800: 30%,
  900: 40%,
);

@mixin applyColorPalette($className, $property, $darkMode: false) {
  .#{$className}-white {
    #{$property}: $white;
  }

  .#{$className}-transparent {
    #{$property}: transparent;
  }

  @each $color, $hex in $theme-colors {
    @if ($color != "white") {
      $classWithPrexix: if($darkMode, dark\:#{$className}, #{$className});
      $hoverClassName: if($darkMode, dark\:hover\:#{$className}, hover\:#{$className});

      .#{$classWithPrexix}-#{$color},
      .#{$hoverClassName}-#{$color}:hover {
        #{$property}: $hex;
      }

      @each $opacity, $alpha in $opacities {
        .#{$classWithPrexix}-#{$color}\/#{$opacity},
        .#{$hoverClassName}-#{$color}\/#{$opacity}:hover {
          #{$property}: rgba($hex, $alpha);
        }
      }

      @each $weight, $value in $weights {
        $background-color: if($weight < 500, lighten($hex, abs($value)), darken($hex, $value));

        .#{$classWithPrexix}-#{$color}-#{$weight},
        .#{$hoverClassName}-#{$color}-#{$weight}:hover {
          #{$property}: $background-color;
        }

        @each $opacity, $alpha in $opacities {
          .#{$classWithPrexix}-#{$color}-#{$weight}\/#{$opacity},
          .#{$hoverClassName}-#{$color}-#{$weight}\/#{$opacity}:hover {
            #{$property}: rgba($background-color, $alpha);
          }
        }
      }
    }
  }
}

@mixin inverse-color($type, $colorKey) {
  $color: map-get($theme-colors, $colorKey);
  $opposite-color: if(index($light-colors, $colorKey) != null, true, false);
  @if not $opposite-color {
    $lightness: lightness($color);
    @if($lightness >= 50) {
      @extend .#{$type}-dark;
    } @else {
      @extend .#{$type}-white;
    }
  } @else {
    @extend .#{$type}-white;
  }
}

@include applyColorPalette('bg', background-color);
@include applyColorPalette('text', color);
@include applyColorPalette('border', border-color);

@media (prefers-color-scheme: dark) {
  @include applyColorPalette('bg', background-color, true);
  @include applyColorPalette('text', color, true);
  @include applyColorPalette('border', border-color, true);
}
